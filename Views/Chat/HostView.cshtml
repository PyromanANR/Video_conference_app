<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Conference</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container">
    <div class="row mt-5">
        <div class="col-md-12">
            <div video-grid class="text-center"></div>
            <div class="controls mt-3">
                <button id="toggleVideo" class="btn btn-primary">Toggle Video</button>
                <button id="toggleAudio" class="btn btn-primary">Toggle Audio</button>
            </div>
        </div>
    </div>
</div>

<div class="chat-container">
    <div class="chat-window">
        <ul id="messages"></ul>
    </div>
    <input type="text" id="chatInput" placeholder="Type your message...">
    <button id="sendButton">Send</button>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>

<script>
        const ROOM_ID = `@ViewBag.roomId`;
        let userId = null;
        let localStream = null;
        const Peers = {};

        const connection = new signalR.HubConnectionBuilder().withUrl('/chatHub').build();

        const startSignalR = async () => {
            await connection.start();
            await connection.invoke('JoinRoom', ROOM_ID, userId);
        };

        const myPeer = new Peer();

        myPeer.on('open', id => {
            userId = id;
            startSignalR();
        });

        const videoGrid = document.querySelector('[video-grid]');
        const myVideo = document.createElement('video');
        myVideo.muted = true;

        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        }).then(stream => {
            addVideoStream(myVideo, stream);
            localStream = stream;
        });

        const toggleVideoButton = document.getElementById('toggleVideo');
        toggleVideoButton.addEventListener('click', () => {
            const enabled = localStream.getVideoTracks()[0].enabled;
            localStream.getVideoTracks()[0].enabled = !enabled;
            toggleVideoButton.textContent = enabled ? 'Turn On Video' : 'Turn Off Video';
        });

        const toggleAudioButton = document.getElementById('toggleAudio');
        toggleAudioButton.addEventListener('click', () => {
            const enabled = localStream.getAudioTracks()[0].enabled;
            localStream.getAudioTracks()[0].enabled = !enabled;
            toggleAudioButton.textContent = enabled ? 'Turn On Audio' : 'Turn Off Audio';
        });

        connection.on('user-connected', id => {
            if (userId === id) return;
            connectNewUser(id, localStream);
        });

        connection.on('user-disconnected', id => {
            if (Peers[id]){
                Peers[id].close();
                delete Peers[id];
            }
        });

        myPeer.on('call', call => {
            call.answer(localStream);
            const userVideo = document.createElement('video');
            call.on('stream', userVideoStream => {
                addVideoStream(userVideo, userVideoStream);
            });
        });

        const addVideoStream = (video, stream) => {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            });
            videoGrid.appendChild(video);
        };

        const connectNewUser = (userId, localStream) => {
            const call = myPeer.call(userId, localStream);
            const userVideo = document.createElement('video');

            call.on('stream', userVideoStream => {
                addVideoStream(userVideo, userVideoStream);
            });

            call.on('close', () => {
                userVideo.remove();
            });

            Peers[userId] = call;
        };
        
        const chatInput = document.getElementById('chatInput');
        const sendButton = document.getElementById('sendButton');
        const messagesList = document.getElementById('messages');
        
        const sendMessage = () => {
            const message = chatInput.value;
            if (message.trim() !== '') {
                connection.invoke('SendMessage', ROOM_ID, userId, message);
                chatInput.value = '';
            }
        };
        
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        sendButton.addEventListener('click', sendMessage);
        
        connection.on('ReceiveMessage', (senderId, message) => {
            const li = document.createElement('li');
            li.textContent = `${senderId}: ${message}`;
            messagesList.appendChild(li);
        });
    </script>
</body>
</html>
