<div class="screen-share-container hidden">
    <div class="resize-handle"></div>
    <div class="screen-share-content"></div>
</div>

<div class="container">
    <div class="row mt-5">
        <div class="col-md-12">
            <div video-grid class="text-center"></div>
        </div>
    </div>
</div>

<div class="chat-section hidden">
    <div class="chat-window">
        <ul id="messages"></ul>
    </div>
    <div class="chat-input">
        <input type="text" id="chatInput" placeholder="Type your message...">        
        <input type="file" id="fileInput" style="display: none;" accept=".pdf, .doc, .docx, .txt, .png, .jpg" multiple>
        <label for="fileInput">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-paperclip" viewBox="0 0 16 16">
                <path d="M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0z" />
            </svg>
        </label>
        <button id="sendButton">Send</button>     
    </div>
</div>

<div class="bottom-buttons">
    <button id="toggleVideo" class="btn btn-primary">Toggle Video</button>
    <button id="toggleAudio" class="btn btn-primary">Toggle Audio</button>
    <button id="shareScreenButton" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-aspect-ratio" viewBox="0 0 16 16">
            <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5z" />
            <path d="M2 4.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H3v2.5a.5.5 0 0 1-1 0zm12 7a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H13V8.5a.5.5 0 0 1 1 0z" />
        </svg>
        <span id="ShareScreenButtonText">Share Screen</span>
    </button>
    <button id="recordScreenButton" class="btn btn-outline-danger">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-record-circle" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
            <path d="M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
        </svg>
        <span id="recordScreenButtonText">Record Screen</span>
    </button>
    <button id="toggleChatButton" class="btn btn-success">Show Chat</button>
    <button id="copyLinkButton" class="btn btn-secondary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"/>
        </svg>
        Copy Meeting Link
    </button>
</div>


<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
<link rel="stylesheet" type="text/css" href="/css/videostyle6.css">

<script>
    document.getElementById("toggleChatButton").addEventListener("click", function() {
        var chatSection = document.querySelector(".chat-section");
        chatSection.classList.toggle("hidden");
    });

</script>

<script>
    const copyLinkButton = document.getElementById('copyLinkButton');
    
    copyLinkButton.addEventListener('click', () => {
        const meetingLink = window.location.href;
        navigator.clipboard.writeText(meetingLink).then(() => {
            alert('Meeting link copied to clipboard!');
        }).catch((error) => {
            console.error('Failed to copy meeting link: ', error);
        });
    });
</script>

<script>
    const ROOM_ID = `@ViewBag.roomId`;
    let userId = null;
    let localStream = null;
    const Peers = {};

    const connection = new signalR.HubConnectionBuilder().withUrl('/chatHub').build();

    const startSignalR = async () => {
        await connection.start();
        await connection.invoke('JoinRoom', ROOM_ID, userId);
    };

    const myPeer = new Peer();

    myPeer.on('open', id => {
        userId = id;
        startSignalR();
    });

    const videoGrid = document.querySelector('[video-grid]');
    const myVideo = document.createElement('video');
    myVideo.muted = true;

    const wrapper = document.createElement('div');
    wrapper.classList.add('video-wrapper');

    const label = document.createElement('div');
    label.classList.add('video-label');
    label.textContent = "Me";

    wrapper.appendChild(myVideo);
    wrapper.appendChild(label);

    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
    }).then(stream => {
        addVideoStream(myVideo, stream, wrapper);
        localStream = stream;
    });

    const toggleVideoButton = document.getElementById('toggleVideo');
    toggleVideoButton.addEventListener('click', () => {
        const enabled = localStream.getVideoTracks()[0].enabled;
        localStream.getVideoTracks()[0].enabled = !enabled;
        toggleVideoButton.textContent = enabled ? 'Turn On Video' : 'Turn Off Video';
    });

    const toggleAudioButton = document.getElementById('toggleAudio');
    toggleAudioButton.addEventListener('click', () => {
        const enabled = localStream.getAudioTracks()[0].enabled;
        localStream.getAudioTracks()[0].enabled = !enabled;
        toggleAudioButton.textContent = enabled ? 'Turn On Audio' : 'Turn Off Audio';
    });

    connection.on('user-connected', (id, userName) => {
        if (userId === id) return;
        connectNewUser(id, localStream, userName);
    });

    connection.on('user-disconnected', id => {
        if (Peers[id]) {
            Peers[id].close();
            delete Peers[id];
        }
    });

    let isScreenSharing = false
    myPeer.on('call', async call => {
        call.answer(localStream);

        const userVideo = document.createElement('video');
        const wrapper = document.createElement('div');
        wrapper.classList.add('video-wrapper');

        const label = document.createElement('div');
        label.classList.add('video-label');
        myPeer.on('connection', conn => {
            conn.on('data', (userName) => {
                console.log(userName);
                label.textContent = userName;
            });
        });
        wrapper.appendChild(userVideo);
        wrapper.appendChild(label);
        if (isScreenSharing) {
            call.on('stream', remoteStream => {
                const video = document.createElement('video');
                video.srcObject = remoteStream;
                video.autoplay = true;
                screenShareContent.appendChild(video);
                screenShareContainer.classList.remove('hidden');
            });
        }
        else {
            call.on('stream', userVideoStream => {
                addVideoStream(userVideo, userVideoStream, wrapper);
            });
        }

    });


    const addVideoStream = (video, stream, wrapper) => {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play();
        });
        videoGrid.appendChild(wrapper);
    };


    const connectNewUser = (userId, localStream, userName) => {
        connection.invoke('GetUserNameFromClient').then(MyName => {
            console.log(MyName);

            const call = myPeer.call(userId, localStream);
            const conn = myPeer.connect(userId);
            conn.on('open', () => {
                conn.send(MyName);
            });

            const userVideo = document.createElement('video');
            const wrapper = document.createElement('div');
            wrapper.classList.add('video-wrapper');

            const label = document.createElement('div');
            label.classList.add('video-label');
            label.textContent = userName;

            wrapper.appendChild(userVideo);
            wrapper.appendChild(label);

            call.on('stream', userVideoStream => {
                addVideoStream(userVideo, userVideoStream, wrapper);
            });

            call.on('close', () => {
                userVideo.remove();
            });

            Peers[userId] = call;
        });
    };


    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendButton');
    const messagesList = document.getElementById('messages');

    const sendMessage = () => {
        const message = chatInput.value;
        if (message.trim() !== '') {
            connection.invoke('SendMessage', ROOM_ID, userId, message);
            chatInput.value = '';
        }
    };

    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    sendButton.addEventListener('click', sendMessage);

    connection.on('ReceiveMessage', (message, userName) => {
        const li = document.createElement('li');
        li.textContent = `${userName}: ${message}`;
        messagesList.appendChild(li);
    });

    const fileInput = document.getElementById('fileInput');

    fileInput.addEventListener('change', (event) => {
        const files = event.target.files;
        for (const file of files) {
            sendFile(file);
        }
    });

    const sendFile = async (file) => {
        const reader = new FileReader();
        reader.onload = (event) => {
            const fileData = event.target.result;
            connection.invoke('SendFile', ROOM_ID, userId, file.name, fileData);
        };
        reader.readAsDataURL(file);
        fileInput.value = '';
    };

    connection.on('ReceiveFile', (fileName, fileData, userName) => {
        const li = document.createElement('li');
        const downloadLink = document.createElement('a');
        downloadLink.href = fileData;
        downloadLink.download = fileName;
        downloadLink.textContent = `Download: ${fileName}`;
        li.textContent = `${userName}: `;
        li.appendChild(downloadLink);
        messagesList.appendChild(li);
    });

    connection.on('ScreenSharingStatusChanged', (userId, status) => {
        isScreenSharing = status
        if (isScreenSharing === false) {
            screenShareContent.innerHTML = '';
            screenShareContainer.classList.add('hidden');
        }
    });


    const shareScreenButton = document.getElementById('shareScreenButton');
    const screenShareContainer = document.querySelector('.screen-share-container');
    const screenShareContent = document.querySelector('.screen-share-content');

    let screenStream = null;

    shareScreenButton.addEventListener('click', async () => {
        try {
            if (!screenStream) {
                document.getElementById('ShareScreenButtonText').textContent = 'Stop Share';
                screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
                connection.invoke('SetScreenSharingStatus', ROOM_ID, userId, true);
                Object.keys(Peers).forEach(peerId => {
                    const call = myPeer.call(peerId, screenStream);
                });

                const video = document.createElement('video');
                video.srcObject = screenStream;
                video.autoplay = true;

                const screenShareContent = document.querySelector('.screen-share-content');
                screenShareContent.appendChild(video);

                screenShareContainer.classList.remove('hidden');
            } else {
                document.getElementById('ShareScreenButtonText').textContent = 'Share Screen';
                screenStream.getTracks().forEach(track => track.stop());
                screenStream = null;
                const screenShareContent = document.querySelector('.screen-share-content');
                screenShareContent.innerHTML = '';
                screenShareContainer.classList.add('hidden');
                connection.invoke('SetScreenSharingStatus', ROOM_ID, userId, false);
            }
        } catch (err) {
            console.error('Error accessing screen sharing:', err);
        }
    });

    let mediaRecorder;
    let recordedChunks = [];

    document.getElementById('recordScreenButton').addEventListener('click', async () => {
        if (!mediaRecorder) {
            const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
            mediaRecorder = new MediaRecorder(screenStream);

            mediaRecorder.ondataavailable = function (event) {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = function () {
                const blob = new Blob(recordedChunks, {
                    type: 'video/webm'
                });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'screen-record.webm';
                document.body.appendChild(a);
                a.click();
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
            };

            mediaRecorder.start();
            document.getElementById('recordScreenButtonText').textContent = 'Stop Recording';
            alert('Recording has started');
        } else {
            mediaRecorder.stop();
            mediaRecorder = null;
            recordedChunks = [];
            document.getElementById('recordScreenButtonText').textContent = 'Record Screen';
            alert('Recording has stopped and the video file has been downloaded');
        }
    });
    </script>