<div class="container">
    <h1>VideoChat</h1>
</div>

<div id="chatSection" style="display: none;">
    <div>
        <label>Enter your name:</label>
        <input type="text" id="userInput" />
    </div>
    <div>
        <label>Enter a message:</label>
        <input type="text" id="messageInput" />
        <button id="sendButton">Send</button>
    </div>
    <div id="videoContainer"></div>
    <ul id="messagesList"></ul>
</div>

<button id="chatButton" class="bottom-center">Chat</button>


@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    
    <script>
    const chatButton = document.getElementById("chatButton");
    const chatSection = document.getElementById("chatSection");
    
    chatButton.addEventListener("click", function() {
        if (chatSection.style.display === "none") {
            chatSection.style.display = "block";
        } else {
            chatSection.style.display = "none";
        }
    });
    </script>
    
    <script>
        const roomId = "@ViewBag.RoomId";

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start()
            .then(() => {
                connection.invoke("JoinRoom", roomId);

            })
            .catch(err => console.error(err.toString()));

        window.addEventListener('beforeunload', () => {
            connection.invoke("LeaveRoom", roomId);
        });

        connection.on("ReceiveMessage", (user, message) => {
            const messageElement = document.createElement("li");
            messageElement.textContent = `${user}: ${message}`;
            document.getElementById("messagesList").appendChild(messageElement);
        });
        
        connection.on("ReceiveMessageHistory", messages => {
            const messagesList = document.getElementById("messagesList");
            messages.forEach(message => {
                const messageElement = document.createElement("li");
                messageElement.textContent = message;
                messagesList.appendChild(messageElement);
            });
        });

        connection.on("UpdateMicrophoneStatus", (user, isMicrophoneEnabled) => {
            let currentUser = document.getElementById("userInput").value; 
            if (user === currentUser) { 
                const microphoneIndicator = document.getElementById("microphoneIndicator");
                microphoneIndicator.style.backgroundColor = isMicrophoneEnabled ? "green" : "gray";
            }
        });

        document.getElementById("sendButton").addEventListener("click", () => {
            const message = document.getElementById("messageInput").value;
            const user = document.getElementById("userInput").value;
            connection.invoke("SendMessage", roomId, user, message);
            document.getElementById("messageInput").value = "";
        });


        let isMicrophoneEnabled = false; 

        document.getElementById("toggleMicrophoneButton").addEventListener("click", () => {
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then((stream) => {
                    const audioTrack = stream.getTracks()[0];
                    isMicrophoneEnabled = !isMicrophoneEnabled; 
                    audioTrack.enabled = isMicrophoneEnabled; 
                    const user = document.getElementById("userInput").value;
                    connection.invoke("ToggleMicrophone", roomId, user, isMicrophoneEnabled);
                })
                .catch((error) => {
                    console.error("Error accessing microphone:", error);
                });
        });

        let peerConnections = {};

        document.getElementById("shareVideoButton").addEventListener("click", async () => {
            const user = document.getElementById("userInput").value;

            const videoElement = document.createElement("video");
            videoElement.id = `video-${user}`;
            document.getElementById("videoContainer").appendChild(videoElement);

            navigator.mediaDevices.getUserMedia({ video: true })
                .then((stream) => {
                    const videoElement = document.getElementById(`video-${user}`);
                    videoElement.srcObject = stream;

                    const peerConnection = new RTCPeerConnection();
                    peerConnections[user] = peerConnection;
                    stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));

                    peerConnection.onicecandidate = event => {
                        if (event.candidate) {
                            connection.invoke("SendIceCandidate", roomId, user, event.candidate);
                        }
                    };

                    const offer = peerConnection.createOffer()
                        .then(offer => {
                            return peerConnection.setLocalDescription(offer);
                        })
                        .then(() => {
                            connection.invoke("SendOffer", roomId, user, peerConnection.localDescription);
                        });
                })
                .catch((error) => {
                    console.error("Error accessing video:", error);
                });
        });


        connection.on("ReceiveOffer", (user, offer) => {
            peerConnections[user].setRemoteDescription(new RTCSessionDescription(offer));
            const answer = peerConnections[user].createAnswer();
            peerConnections[user].setLocalDescription(answer);
            connection.invoke("SendAnswer", roomId, user, answer);
        });

        connection.on("ReceiveAnswer", (user, answer) => {
            peerConnections[user].setRemoteDescription(new RTCSessionDescription(answer));
        });

        connection.on("ReceiveIceCandidate", (user, candidate) => {
            peerConnections[user].addIceCandidate(new RTCIceCandidate(candidate));
        });


        connection.start().catch(err => console.error(err.toString()));
    </script>
}